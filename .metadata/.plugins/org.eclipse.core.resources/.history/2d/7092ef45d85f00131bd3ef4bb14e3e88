# A list is symmetric if the first row is the same as the first column,
# the second row is the same as the second column and so on. Write a
# procedure, symmetric, which takes a list as input, and returns the
# boolean True if the list is symmetric and False if it is not.


'''
Pseudo code to solve: 
Calc length for size of puzzle/num of items in a row
Take first row
Compare to first column items (make sure identical)
Go to next row, take items from i=1 and compare to column 2 
from i=1
etc.
'''


def symmetric(puzzle):
    num = len(puzzle) // max times runs thru loops (num of items in one row)
    i = 0
    while i < num:
        for row in puzzle: // one row in puzzle
            for col in puzzle: 
                row[i]==col[i]
                i += 1
        




print symmetric([[1, 2, 3],
                [2, 3, 4],
                [3, 4, 1]])
#>>> True

print symmetric([["cat", "dog", "fish"],
                ["dog", "dog", "fish"],
               ["fish", "fish", "cat"]])
#>>> True

print symmetric([["cat", "dog", "fish"],
                ["dog", "dog", "dog"],
                ["fish","fish","cat"]])
#>>> False

print symmetric([[1, 2],
                [2, 1]])
#>>> True

print symmetric([[1, 2, 3, 4],
                [2, 3, 4, 5],
                [3, 4, 5, 6]])
#>>> False

#print symmetric([[1,2,3],
#                 [2,3,1]])
#>>> False